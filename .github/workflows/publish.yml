# This workflow will build and publish a Docker Image to GitHub Container Registry
# See https://github.com/docker/build-push-action

name: Publish Image

on: workflow_dispatch
    
jobs:
  push_to_registry:
    name: Push Docker Image to GitHub Container Registry
    runs-on: ubuntu-latest
    if: false
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      
    - name: Set version variables
      id: vars
      run: |
        TAG=${GITHUB_REF#refs/*/}
        MAJOR=$(echo $TAG | grep -oP '^v\d+')
        MINOR=$(echo $TAG | grep -oP '^v\d+\.\d+')
        PATCH=$TAG
        echo "major=$MAJOR" >> $GITHUB_OUTPUT
        echo "minor=$MINOR" >> $GITHUB_OUTPUT
        echo "patch=$PATCH" >> $GITHUB_OUTPUT

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
   
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN  }}
    
    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v6
      with:
        push: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
        tags: |
          ghcr.io/rafhaanshah/net-mon:${{ steps.vars.outputs.major }}
          ghcr.io/rafhaanshah/net-mon:${{ steps.vars.outputs.minor }}
          ghcr.io/rafhaanshah/net-mon:${{ steps.vars.outputs.patch }}
          ghcr.io/rafhaanshah/net-mon:latest

    - name: Print image digest
      run: echo ${{ steps.docker_build.outputs.digest }}

  upload_executable:
    name: Build and upload executable to release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['windows-latest', 'ubuntu-24.04', 'ubuntu-24.04-arm', 'macos-latest']
        python-version: [3.13]
        include:
          - os: ubuntu-latest
            path: ~/.cache/pip
          - os: macos-latest
            path: ~/Library/Caches/pip
          - os: windows-latest
            path: ~\AppData\Local\pip\Cache

    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ${{ matrix.path }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build executable
        run: pyinstaller app.spec

      - name: Rename executable with OS and arch
        if: runner.os != 'Windows'
        run: |
          ARCH=$(arch)
          OS=${{ runner.os }}
          OS=$(echo "${OS}" | tr '[:upper:]' '[:lower:]')
          mv dist/netmon dist/netmon-${OS}-${ARCH}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          path: dist/*
